// Zenn Clone - SQLite Development Schema
// 開発環境用の簡略化されたスキーマ

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========================================
// User & Authentication
// ========================================

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  password        String?   // Nullable for OAuth users
  displayName     String
  bio             String?
  avatarUrl       String?
  githubUsername  String?
  twitterUsername String?
  websiteUrl      String?
  company         String?
  location        String?
  
  role            String    @default("USER") // USER, MODERATOR, ADMIN
  emailVerified   DateTime?
  isActive        Boolean   @default(true)
  
  // Counts (denormalized)
  articlesCount   Int       @default(0)
  booksCount      Int       @default(0)
  scrapsCount     Int       @default(0)
  followersCount  Int       @default(0)
  followingCount  Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  // Relations
  articles        Article[]
  books           Book[]
  scraps          Scrap[]
  scrapPosts      ScrapPost[]
  comments        Comment[]
  likes           Like[]
  followedBy      Follow[]  @relation("Following")
  following       Follow[]  @relation("Follower")
  bookmarks       Bookmark[]
  notifications   Notification[]
  sessions        Session[]
  authProviders   AuthProvider[]
  purchases       Purchase[]
  
  @@index([username])
  @@index([email])
}

// ========================================
// Authentication & Security
// ========================================

model Session {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  
  ipAddress       String?
  userAgent       String?
  lastActivity    DateTime  @default(now())
  expiresAt       DateTime
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model PasswordReset {
  id              String    @id @default(uuid())
  email           String
  token           String    @unique
  
  used            Boolean   @default(false)
  expiresAt       DateTime
  
  createdAt       DateTime  @default(now())
  
  @@index([email])
  @@index([token])
}

model EmailVerification {
  id              String    @id @default(uuid())
  email           String
  token           String    @unique
  
  verified        Boolean   @default(false)
  verifiedAt      DateTime?
  expiresAt       DateTime
  
  createdAt       DateTime  @default(now())
  
  @@index([email])
  @@index([token])
}

model AuthProvider {
  id              String    @id @default(uuid())
  userId          String
  
  provider        String    // github, google, twitter
  providerId      String
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@index([userId])
}

// ========================================
// Content
// ========================================

model Article {
  id              String    @id @default(uuid())
  slug            String    @unique
  authorId        String
  
  title           String
  emoji           String?
  type            String    @default("TECH") // TECH or IDEA
  content         String
  contentHtml     String?
  excerpt         String?
  coverImageUrl   String?
  
  // Tags stored as JSON string
  topics          String?   // JSON array of tags
  
  status          String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt     DateTime?
  
  viewsCount      Int       @default(0)
  likesCount      Int       @default(0)
  commentsCount   Int       @default(0)
  
  isDeleted       Boolean   @default(false)
  lastEditedAt    DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  tags            ArticleTag[]
  
  @@index([authorId])
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([viewsCount])
  @@index([isDeleted])
}

model Book {
  id              String    @id @default(uuid())
  slug            String    @unique
  authorId        String
  
  title           String
  description     String?
  coverImageUrl   String?
  price           Int       @default(0)
  
  status          String    @default("DRAFT")
  publishedAt     DateTime?
  
  chaptersCount   Int       @default(0)
  purchaseCount   Int       @default(0)
  likesCount      Int       @default(0)
  
  isDeleted       Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  chapters        Chapter[]
  purchases       Purchase[]
  likes           Like[]
  bookmarks       Bookmark[]
  tags            BookTag[]
  
  @@index([authorId])
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([isDeleted])
}

model Chapter {
  id              String    @id @default(uuid())
  bookId          String
  
  number          Int
  title           String
  slug            String
  content         String
  contentHtml     String?
  isFree          Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  book            Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([bookId, number])
  @@unique([bookId, slug])
}

model Scrap {
  id              String    @id @default(uuid())
  authorId        String
  
  title           String
  emoji           String?
  isPublic        Boolean   @default(true)
  
  postsCount      Int       @default(0)
  likesCount      Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  posts           ScrapPost[]
  tags            ScrapTag[]
  bookmarks       Bookmark[]
  likes           Like[]
  
  @@index([authorId])
  @@index([isPublic])
  @@index([createdAt])
}

model ScrapPost {
  id              String    @id @default(uuid())
  scrapId         String
  authorId        String
  
  content         String
  contentHtml     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  scrap           Scrap     @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  author          User      @relation(fields: [authorId], references: [id])
  
  @@index([scrapId])
}

// ========================================
// Interactions
// ========================================

model Like {
  id              String    @id @default(uuid())
  userId          String
  targetType      String    // ARTICLE, BOOK, SCRAP, COMMENT
  targetId        String
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article?  @relation(fields: [targetId], references: [id], onDelete: Cascade)
  book            Book?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  scrap           Scrap?    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment         Comment?  @relation(fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
  @@index([userId])
}

model Comment {
  id              String    @id @default(uuid())
  authorId        String
  
  articleId       String?
  bookId          String?
  parentId        String?
  
  content         String
  contentHtml     String?
  
  likesCount      Int       @default(0)
  isDeleted       Boolean   @default(false)
  editedAt        DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  article         Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent          Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  likes           Like[]
  
  @@index([articleId])
  @@index([parentId])
  @@index([authorId])
}

model Follow {
  id              String    @id @default(uuid())
  followerId      String
  followingId     String
  
  createdAt       DateTime  @default(now())
  
  follower        User      @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following       User      @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Bookmark {
  id              String    @id @default(uuid())
  userId          String
  
  articleId       String?
  bookId          String?
  scrapId         String?
  
  note            String?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  book            Book?     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  scrap           Scrap?    @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([articleId])
  @@index([bookId])
  @@index([scrapId])
}

model Notification {
  id              String    @id @default(uuid())
  userId          String
  
  type            String    // NEW_FOLLOWER, ARTICLE_LIKED, etc.
  title           String
  message         String?
  targetUrl       String?
  
  isRead          Boolean   @default(false)
  readAt          DateTime?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

// ========================================
// Tags
// ========================================

model Tag {
  id              String    @id @default(uuid())
  name            String    @unique
  slug            String    @unique
  displayName     String
  description     String?
  
  articlesCount   Int       @default(0)
  booksCount      Int       @default(0)
  scrapsCount     Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  articles        ArticleTag[]
  books           BookTag[]
  scraps          ScrapTag[]
  
  @@index([slug])
  @@index([articlesCount])
  @@index([booksCount])
}

model ArticleTag {
  id              String    @id @default(uuid())
  articleId       String
  tagId           String
  
  article         Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([articleId, tagId])
}

model BookTag {
  id              String    @id @default(uuid())
  bookId          String
  tagId           String
  
  book            Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([bookId, tagId])
}

model ScrapTag {
  id              String    @id @default(uuid())
  scrapId         String
  tagId           String
  
  scrap           Scrap     @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([scrapId, tagId])
}

// ========================================
// Commerce
// ========================================

model Purchase {
  id              String    @id @default(uuid())
  userId          String
  bookId          String
  
  price           Int
  purchasedAt     DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  book            Book      @relation(fields: [bookId], references: [id])
  
  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

// ========================================
// Audit & Analytics
// ========================================

model AuditLog {
  id              String    @id @default(uuid())
  userId          String?
  
  action          String    // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  entityType      String?   // ARTICLE, BOOK, USER, etc.
  entityId        String?
  
  oldData         String?   // JSON string
  newData         String?   // JSON string
  
  ipAddress       String?
  userAgent       String?
  metadata        String?   // JSON string
  
  createdAt       DateTime  @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

model ArticleRevision {
  id              String    @id @default(uuid())
  articleId       String
  userId          String
  
  version         Int
  title           String
  content         String
  contentHtml     String?
  
  changeMessage   String?
  
  createdAt       DateTime  @default(now())
  
  @@unique([articleId, version])
  @@index([articleId])
  @@index([userId])
  @@index([createdAt])
}

model Analytics {
  id              String    @id @default(uuid())
  
  eventType       String    // PAGE_VIEW, ARTICLE_READ, BOOK_PURCHASE
  targetType      String?   // ARTICLE, BOOK, USER
  targetId        String?
  
  userId          String?
  sessionId       String?
  
  referrer        String?
  path            String?
  ipAddress       String?
  userAgent       String?
  country         String?
  
  metadata        String?   // JSON string
  
  createdAt       DateTime  @default(now())
  
  @@index([eventType])
  @@index([targetType, targetId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

// ========================================
// API Management
// ========================================

model ApiKey {
  id              String    @id @default(uuid())
  userId          String
  
  name            String
  key             String    @unique
  
  permissions     String?   // JSON array of permissions
  rateLimit       Int       @default(1000)
  
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([key])
  @@index([isActive])
}

model RefreshToken {
  id              String    @id @default(uuid())
  userId          String
  
  token           String    @unique
  family          String    // Token family for rotation
  
  isRevoked       Boolean   @default(false)
  revokedAt       DateTime?
  
  expiresAt       DateTime
  
  createdAt       DateTime  @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([family])
}