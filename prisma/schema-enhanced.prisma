// Zenn Clone - Enhanced Database Schema
// 本番環境との互換性を考慮した拡張スキーマ
// Version: 2.0.0
// Updated: 2025-01-09

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"  // 開発環境用。本番はpostgresqlに変更
  url      = env("DATABASE_URL")
}

// ========================================
// 1. USER & AUTHENTICATION
// ========================================

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  displayName     String
  bio             String?
  avatarUrl       String?
  githubUsername  String?
  twitterUsername String?
  websiteUrl      String?
  company         String?
  location        String?
  
  // 認証関連
  passwordHash    String?   // OAuthのみのユーザーはNULL
  emailVerified   DateTime?
  emailVerificationToken String?
  isActive        Boolean   @default(true)
  
  // カウント（非正規化）
  articlesCount   Int       @default(0)
  booksCount      Int       @default(0)
  scrapsCount     Int       @default(0)
  followersCount  Int       @default(0)
  followingCount  Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // ソフトデリート
  
  // リレーション
  articles        Article[]
  books           Book[]
  scraps          Scrap[]
  scrapPosts      ScrapPost[]
  comments        Comment[]
  likes           Like[]
  followedBy      Follow[]  @relation("Following")
  following       Follow[]  @relation("Follower")
  bookmarks       Bookmark[]
  notifications   Notification[]
  authProviders   AuthProvider[]
  sessions        Session[]
  settings        UserSettings?
  badgesReceived  BadgeTransaction[] @relation("BadgeRecipient")
  badgesSent      BadgeTransaction[] @relation("BadgeSender")
  purchases       Purchase[]
  earnings        Earning[]
  payouts         Payout[]
  eventSubmissions EventSubmission[]
  publicationMemberships PublicationMember[]
  auditLogs       AuditLog[]
  
  @@index([username])
  @@index([email])
  @@index([createdAt])
}

// OAuth認証プロバイダー
model AuthProvider {
  id              String    @id @default(uuid())
  userId          String
  provider        String    // github, google, twitter
  providerUserId  String
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerUserId])
  @@index([userId])
}

// セッション管理
model Session {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  ipAddress       String?
  userAgent       String?
  expiresAt       DateTime
  lastAccessedAt  DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

// ユーザー設定
model UserSettings {
  userId          String    @id
  
  // JSON形式で保存（SQLiteの制約）
  emailNotifications String @default("{\"likes\":true,\"comments\":true,\"follows\":true,\"mentions\":true}")
  privacySettings    String @default("{\"profilePublic\":true,\"showEmail\":false}")
  editorSettings     String @default("{\"theme\":\"light\",\"fontSize\":16,\"autoSave\":true}")
  
  language        String    @default("ja")
  timezone        String    @default("Asia/Tokyo")
  
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========================================
// 2. CONTENT MANAGEMENT
// ========================================

// パブリケーション（組織/グループ）
model Publication {
  id              String    @id @default(uuid())
  name            String    @unique
  displayName     String
  description     String?
  avatarUrl       String?
  websiteUrl      String?
  twitterUsername String?
  
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  members         PublicationMember[]
  articles        Article[]
}

// パブリケーションメンバー
model PublicationMember {
  id              String    @id @default(uuid())
  publicationId   String
  userId          String
  role            String    @default("member") // owner, admin, member
  
  joinedAt        DateTime  @default(now())
  
  publication     Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([publicationId, userId])
  @@index([publicationId])
  @@index([userId])
}

// 記事
model Article {
  id              String    @id @default(uuid())
  slug            String    
  authorId        String
  publicationId   String?
  
  title           String
  emoji           String?
  type            String    @default("TECH") // TECH or IDEA
  content         String
  contentHtml     String?
  excerpt         String?
  coverImageUrl   String?
  
  // タグ（JSON配列として保存）
  topics          String?   
  
  status          String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt     DateTime?
  readingTime     Int?      // 推定読了時間（分）
  
  viewsCount      Int       @default(0)
  likesCount      Int       @default(0)
  commentsCount   Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  publication     Publication? @relation(fields: [publicationId], references: [id])
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  tags            ArticleTag[]
  badgeTransactions BadgeTransaction[]
  
  @@unique([authorId, slug])
  @@index([authorId])
  @@index([publicationId])
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
}

// 書籍
model Book {
  id              String    @id @default(uuid())
  slug            String    
  authorId        String
  
  title           String
  description     String?
  coverImageUrl   String?
  price           Int       @default(0) // 0 = 無料
  
  status          String    @default("DRAFT")
  publishedAt     DateTime?
  isFeatured      Boolean   @default(false)
  
  chaptersCount   Int       @default(0)
  purchaseCount   Int       @default(0)
  likesCount      Int       @default(0)
  viewsCount      Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  chapters        Chapter[]
  purchases       Purchase[]
  likes           Like[]
  bookmarks       Bookmark[]
  tags            BookTag[]
  comments        Comment[]
  badgeTransactions BadgeTransaction[]
  
  @@unique([authorId, slug])
  @@index([authorId])
  @@index([slug])
  @@index([publishedAt])
  @@index([price])
}

// 書籍チャプター
model Chapter {
  id              String    @id @default(uuid())
  bookId          String
  
  number          Int
  title           String
  slug            String
  content         String
  contentHtml     String?
  isFree          Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  book            Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([bookId, number])
  @@unique([bookId, slug])
}

// スクラップ
model Scrap {
  id              String    @id @default(uuid())
  authorId        String
  
  title           String
  emoji           String?
  isPublic        Boolean   @default(true)
  isClosed        Boolean   @default(false)
  closedAt        DateTime?
  
  postsCount      Int       @default(0)
  likesCount      Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  posts           ScrapPost[]
  tags            ScrapTag[]
  bookmarks       Bookmark[]
  
  @@index([authorId])
  @@index([updatedAt])
}

// スクラップ投稿
model ScrapPost {
  id              String    @id @default(uuid())
  scrapId         String
  authorId        String
  
  content         String
  contentHtml     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  scrap           Scrap     @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  author          User      @relation(fields: [authorId], references: [id])
  
  @@index([scrapId])
  @@index([createdAt])
}

// ========================================
// 3. ENGAGEMENT & INTERACTIONS
// ========================================

// いいね（ポリモーフィック）
model Like {
  id              String    @id @default(uuid())
  userId          String
  targetType      String    // ARTICLE, BOOK, SCRAP, COMMENT
  targetId        String
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article?  @relation(fields: [targetId], references: [id], onDelete: Cascade)
  book            Book?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment         Comment?  @relation(fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
}

// コメント
model Comment {
  id              String    @id @default(uuid())
  authorId        String
  
  articleId       String?
  bookId          String?
  parentId        String?
  
  content         String
  contentHtml     String?
  
  likesCount      Int       @default(0)
  isAuthorReply   Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  author          User      @relation(fields: [authorId], references: [id])
  article         Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  book            Book?     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  parent          Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  likes           Like[]
  
  @@index([articleId])
  @@index([bookId])
  @@index([parentId])
  @@index([createdAt])
}

// フォロー関係
model Follow {
  id              String    @id @default(uuid())
  followerId      String
  followingId     String
  
  createdAt       DateTime  @default(now())
  
  follower        User      @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following       User      @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ブックマーク
model Bookmark {
  id              String    @id @default(uuid())
  userId          String
  
  articleId       String?
  bookId          String?
  scrapId         String?
  
  note            String?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  book            Book?     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  scrap           Scrap?    @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// 通知
model Notification {
  id              String    @id @default(uuid())
  userId          String
  
  type            String    // NEW_FOLLOWER, ARTICLE_LIKED, COMMENT, MENTION, BADGE, PURCHASE
  actorId         String?
  targetType      String?
  targetId        String?
  
  title           String
  message         String?
  targetUrl       String?
  data            String?   // JSON形式で追加データ
  
  isRead          Boolean   @default(false)
  readAt          DateTime?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

// ========================================
// 4. BADGES & MONETIZATION
// ========================================

// バッジ定義
model Badge {
  id              String    @id @default(uuid())
  name            String
  emoji           String
  price           Int       // JPY
  description     String?
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  
  transactions    BadgeTransaction[]
}

// バッジ取引
model BadgeTransaction {
  id              String    @id @default(uuid())
  senderId        String
  recipientId     String
  badgeId         String
  articleId       String?
  bookId          String?
  
  quantity        Int       @default(1)
  totalAmount     Int
  message         String?
  
  createdAt       DateTime  @default(now())
  
  sender          User      @relation("BadgeSender", fields: [senderId], references: [id])
  recipient       User      @relation("BadgeRecipient", fields: [recipientId], references: [id])
  badge           Badge     @relation(fields: [badgeId], references: [id])
  article         Article?  @relation(fields: [articleId], references: [id])
  book            Book?     @relation(fields: [bookId], references: [id])
  
  @@index([senderId])
  @@index([recipientId])
  @@index([articleId])
  @@index([bookId])
}

// 購入履歴
model Purchase {
  id              String    @id @default(uuid())
  userId          String
  bookId          String
  
  price           Int
  paymentMethod   String?
  transactionId   String?
  status          String    @default("completed") // pending, completed, refunded
  
  purchasedAt     DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  book            Book      @relation(fields: [bookId], references: [id])
  
  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

// 収益
model Earning {
  id              String    @id @default(uuid())
  userId          String
  type            String    // book_sale, badge_received, support
  relatedId       String?
  
  amount          Int
  fee             Int       @default(0)
  netAmount       Int
  currency        String    @default("JPY")
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// 支払い
model Payout {
  id              String    @id @default(uuid())
  userId          String
  
  amount          Int
  currency        String    @default("JPY")
  method          String?
  status          String    @default("pending") // pending, processing, completed, failed
  processedAt     DateTime?
  referenceNumber String?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// ========================================
// 5. TAGS & CLASSIFICATION
// ========================================

model Tag {
  id              String    @id @default(uuid())
  name            String    @unique
  slug            String    @unique
  displayName     String
  description     String?
  iconUrl         String?
  
  articlesCount   Int       @default(0)
  booksCount      Int       @default(0)
  scrapsCount     Int       @default(0)
  followersCount  Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  articles        ArticleTag[]
  books           BookTag[]
  scraps          ScrapTag[]
  tagFollowers    TagFollow[]
  
  @@index([slug])
  @@index([articlesCount])
  @@index([followersCount])
}

// タグフォロー
model TagFollow {
  id              String    @id @default(uuid())
  userId          String
  tagId           String
  
  createdAt       DateTime  @default(now())
  
  tag             Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tagId])
  @@index([userId])
  @@index([tagId])
}

// 記事タグ
model ArticleTag {
  id              String    @id @default(uuid())
  articleId       String
  tagId           String
  
  article         Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([articleId, tagId])
}

// 書籍タグ
model BookTag {
  id              String    @id @default(uuid())
  bookId          String
  tagId           String
  
  book            Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([bookId, tagId])
}

// スクラップタグ
model ScrapTag {
  id              String    @id @default(uuid())
  scrapId         String
  tagId           String
  
  scrap           Scrap     @relation(fields: [scrapId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id])
  
  @@unique([scrapId, tagId])
}

// ========================================
// 6. EVENTS
// ========================================

// イベント
model Event {
  id              String    @id @default(uuid())
  slug            String    @unique
  title           String
  description     String?
  type            String    // hackathon, contest, conference
  
  startDate       DateTime
  endDate         DateTime
  submissionDeadline DateTime?
  
  bannerImageUrl  String?
  rules           String?
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  submissions     EventSubmission[]
  prizes          EventPrize[]
  
  @@index([isActive, startDate])
  @@index([type])
}

// イベント投稿
model EventSubmission {
  id              String    @id @default(uuid())
  eventId         String
  userId          String
  articleId       String?
  
  title           String
  description     String?
  url             String?
  status          String    @default("submitted") // submitted, reviewing, accepted, rejected
  score           Int?
  feedback        String?
  
  submittedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  
  event           Event     @relation(fields: [eventId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId, articleId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
}

// イベント賞品
model EventPrize {
  id              String    @id @default(uuid())
  eventId         String
  rank            Int
  title           String
  description     String?
  amount          Int?
  winnerId        String?
  winningSubmissionId String?
  
  event           Event     @relation(fields: [eventId], references: [id])
  
  @@index([eventId])
  @@index([rank])
}

// ========================================
// 7. ADMIN & ANALYTICS
// ========================================

// 監査ログ
model AuditLog {
  id              String    @id @default(uuid())
  userId          String?
  action          String
  entityType      String
  entityId        String
  changes         String?   // JSON形式
  ipAddress       String?
  userAgent       String?
  
  createdAt       DateTime  @default(now())
  
  user            User?     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// アナリティクスイベント
model AnalyticsEvent {
  id              String    @id @default(uuid())
  userId          String?
  sessionId       String?
  eventType       String
  targetType      String?
  targetId        String?
  properties      String?   // JSON形式
  referrer        String?
  ipAddress       String?
  userAgent       String?
  
  createdAt       DateTime  @default(now())
  createdDate     String    // YYYY-MM-DD形式
  
  @@index([userId])
  @@index([sessionId])
  @@index([eventType])
  @@index([targetType, targetId])
  @@index([createdDate])
}