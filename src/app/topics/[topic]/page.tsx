'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { ArticleCard } from '@/components/cards/ArticleCard'
import { BookCard } from '@/components/cards/BookCard'
import { ScrapCard } from '@/components/cards/ScrapCard'
import { articlesApi, booksApi, scrapsApi } from '@/lib/api'
import '@/styles/pages/topics.css'

// „Éà„Éî„ÉÉ„ÇØ„Ç¢„Ç§„Ç≥„É≥„Éû„ÉÉ„Éî„É≥„Ç∞
const getTopicIcon = (topic: string) => {
  const icons: Record<string, string> = {
    'Next.js': '‚ö°',
    'React': '‚öõÔ∏è',
    'TypeScript': 'üî∑',
    'JavaScript': 'üíõ',
    'Rust': 'ü¶Ä',
    'Go': 'üêπ',
    'Python': 'üêç',
    'AWS': '‚òÅÔ∏è',
    'Docker': 'üê≥',
    'Kubernetes': '‚ò∏Ô∏è',
    'GraphQL': 'üîÑ',
    'Node.js': 'üíö',
    'Vue.js': 'üíö',
    'Angular': 'üî∫',
    'Git': 'üîÄ'
  }
  return icons[topic] || 'üìö'
}

const getTopicDescription = (topic: string) => {
  const descriptions: Record<string, string> = {
    'Next.js': 'Vercel„ÅåÈñãÁô∫„Åô„ÇãReact„Éô„Éº„Çπ„ÅÆ„Éï„É´„Çπ„Çø„ÉÉ„ÇØ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÄÇSSR„ÄÅSSG„ÄÅISR„Å™„Å©Â§öÊßò„Å™„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊâãÊ≥ï„Çí„Çµ„Éù„Éº„Éà„Åó„ÄÅÊúÄÊñ∞„ÅÆWebÈñãÁô∫„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„ÇíÂÆüÁèæ„ÄÇ',
    'React': 'MetaÔºàÊóßFacebookÔºâ„ÅåÈñãÁô∫„Åó„ÅüUI„É©„Ç§„Éñ„É©„É™„ÄÇ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éô„Éº„Çπ„ÅÆÈñãÁô∫„Å´„Çà„Çä„ÄÅÂÜçÂà©Áî®ÂèØËÉΩ„Åß‰øùÂÆàÊÄß„ÅÆÈ´ò„ÅÑ„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇíÊßãÁØâ„ÄÇ',
    'TypeScript': 'Microsoft„ÅåÈñãÁô∫„Åó„ÅüJavaScript„ÅÆ„Çπ„Éº„Éë„Éº„Çª„ÉÉ„Éà„ÄÇÈùôÁöÑÂûã‰ªò„Åë„Å´„Çà„ÇäÂ§ßË¶èÊ®°„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈñãÁô∫ÂäπÁéá„Å®‰øùÂÆàÊÄß„ÇíÂ§ßÂπÖ„Å´Âêë‰∏ä„ÄÇ',
    'Rust': '„É°„É¢„É™ÂÆâÂÖ®ÊÄß„Å®È´òÈÄüÊÄß„Çí‰∏°Á´ã„Åô„Çã„Ç∑„Çπ„ÉÜ„É†„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÄÇÊâÄÊúâÊ®©„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„Çä„ÄÅ„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Çø„Å™„Åó„ÅßÂÆâÂÖ®ÊÄß„Çí‰øùË®º„ÄÇ',
    'Go': 'Google„ÅåÈñãÁô∫„Åó„Åü„Ç∑„É≥„Éó„É´„ÅßÈ´òÈÄü„Å™„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÄÇ‰∏¶Ë°åÂá¶ÁêÜ„ÅåÂæóÊÑè„Åß„ÄÅ„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÈñãÁô∫„Å´ÊúÄÈÅ©„ÄÇ',
    'AWS': 'Amazon Web Services - ‰∏ñÁïåÊúÄÂ§ß„ÅÆ„ÇØ„É©„Ç¶„Éâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÄÇ200‰ª•‰∏ä„ÅÆ„Çµ„Éº„Éì„Çπ„Åß„ÄÅ„ÅÇ„Çâ„ÇÜ„Çã„Éì„Ç∏„Éç„Çπ„Éã„Éº„Ç∫„Å´ÂØæÂøú„ÄÇ',
    'GraphQL': 'Facebook„ÅåÈñãÁô∫„Åó„ÅüAPIÁî®„ÇØ„Ç®„É™Ë®ÄË™û„ÄÇÂøÖË¶Å„Å™„Éá„Éº„Çø„Å†„Åë„ÇíÂäπÁéáÁöÑ„Å´ÂèñÂæó„Åó„ÄÅ„Ç™„Éº„Éê„Éº„Éï„Çß„ÉÉ„ÉÅ„É≥„Ç∞ÂïèÈ°å„ÇíËß£Ê±∫„ÄÇ',
    'Docker': '„Ç≥„É≥„ÉÜ„ÉäÂûã‰ªÆÊÉ≥ÂåñÊäÄË°ì„ÅÆ„Éá„Éï„Ç°„ÇØ„Éà„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„ÄÇÈñãÁô∫Áí∞Â¢É„ÅÆÁµ±‰∏Ä„Å®„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂèØÊê¨ÊÄß„ÇíÂÆüÁèæ„ÄÇ'
  }
  return descriptions[topic] || `${topic}„ÅØ„ÄÅ„É¢„ÉÄ„É≥„Å™ÈñãÁô∫„Å´„Åä„ÅÑ„Å¶ÈáçË¶Å„Å™ÊäÄË°ì„Åß„Åô„ÄÇÂ§ö„Åè„ÅÆÈñãÁô∫ËÄÖ„ÅåÊó•„ÄÖÊñ∞„Åó„ÅÑÁü•Ë≠ò„ÇíÂÖ±Êúâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ`
}

const getRelatedTopics = (topic: string) => {
  const related: Record<string, string[]> = {
    'Next.js': ['React', 'TypeScript', 'Vercel', 'SSR', 'JavaScript', 'Tailwind CSS'],
    'React': ['Next.js', 'TypeScript', 'Redux', 'JavaScript', 'React Native', 'Vite'],
    'TypeScript': ['JavaScript', 'React', 'Node.js', 'Angular', 'Vue.js', 'Deno'],
    'Rust': ['WebAssembly', 'Systems Programming', 'Tokio', 'Actix', 'Memory Safety'],
    'Go': ['Docker', 'Kubernetes', 'Microservices', 'gRPC', 'Cloud Native', 'Gin']
  }
  return related[topic] || ['JavaScript', '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞', 'WebÈñãÁô∫', 'Backend', 'Frontend', 'DevOps']
}

export default async function TopicPage({ params }: { params: Promise<{ topic: string }> }) {
  const resolvedParams = await params
  const topicId = decodeURIComponent(resolvedParams.topic)
  
  return <TopicPageClient topicId={topicId} />
}

function TopicPageClient({ topicId }: { topicId: string }) {
  const [activeTab, setActiveTab] = useState('all')
  const [isFollowing, setIsFollowing] = useState(false)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [content, setContent] = useState<any>({
    articles: [],
    books: [],
    scraps: []
  })
  const [stats, setStats] = useState({
    articlesCount: 0,
    booksCount: 0,
    scrapsCount: 0
  })

  useEffect(() => {
    fetchTopicContent()
  }, [topicId])

  const fetchTopicContent = async () => {
    try {
      setLoading(true)
      setError(null)

      // „Éà„Éî„ÉÉ„ÇØ„Å´Èñ¢ÈÄ£„Åô„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó
      const [articlesRes, booksRes, scrapsRes] = await Promise.all([
        articlesApi.getPublishedArticles(20, 0),
        booksApi.getPublishedBooks(10, 0),
        scrapsApi.getOpenScraps(10, 0)
      ])

      // „Éà„Éî„ÉÉ„ÇØ„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàtopicsÈÖçÂàó„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™çÔºâ
      const topicArticles = (Array.isArray(articlesRes?.data) ? articlesRes.data : []).filter((article: any) =>
        article.topics?.some((t: string) => t.toLowerCase() === topicId.toLowerCase())
      )
      
      const topicBooks = (Array.isArray(booksRes?.data) ? booksRes.data : []).filter((book: any) =>
        book.topics?.some((t: string) => t.toLowerCase() === topicId.toLowerCase())
      )
      
      const topicScraps = (Array.isArray(scrapsRes?.data) ? scrapsRes.data : []).filter((scrap: any) =>
        scrap.topics?.some((t: string) => t.toLowerCase() === topicId.toLowerCase())
      )

      // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊï¥ÂΩ¢
      const formattedContent = {
        articles: topicArticles.slice(0, 6).map((article: any) => ({
          id: article.id,
          title: article.title,
          emoji: article.emoji || 'üìù',
          slug: article.slug,
          author: {
            username: article.user?.username || 'unknown',
            name: article.user?.display_name || article.user?.username || 'Unknown',
            avatar: article.user?.avatar_url || '/images/avatar-placeholder.svg'
          },
          publishedAt: article.published_at || article.created_at,
          readTime: `${Math.ceil(article.content.length / 500)}ÂàÜ`,
          likes: article.likes_count,
          comments: article.comments_count,
          type: article.type as 'tech' | 'idea',
          tags: article.topics || []
        })),
        books: topicBooks.slice(0, 4).map((book: any) => ({
          id: book.id,
          title: book.title,
          slug: book.slug,
          coverImage: book.cover_image_url || '/images/placeholder.svg',
          author: {
            username: book.user?.username || 'unknown',
            name: book.user?.display_name || book.user?.username || 'Unknown',
            avatar: book.user?.avatar_url || '/images/avatar-placeholder.svg'
          },
          price: book.price || 0,
          likes: book.likes_count,
          publishedAt: book.published_at || book.created_at,
          description: book.description || '',
          chapters: book.chapters_count || 0,
          pages: book.total_pages || 0
        })),
        scraps: topicScraps.slice(0, 4).map((scrap: any) => ({
          id: scrap.id,
          title: scrap.title,
          author: {
            username: scrap.user?.username || 'unknown',
            name: scrap.user?.display_name || scrap.user?.username || 'Unknown',
            avatar: scrap.user?.avatar_url || '/images/avatar-placeholder.svg'
          },
          publishedAt: scrap.created_at,
          updatedAt: scrap.updated_at,
          commentsCount: scrap.comments_count,
          isOpen: !scrap.closed,
          emoji: scrap.emoji || 'üí≠',
          excerpt: (scrap.content || '').substring(0, 150) + '...'
        }))
      }

      setContent(formattedContent)
      setStats({
        articlesCount: topicArticles.length,
        booksCount: topicBooks.length,
        scrapsCount: topicScraps.length
      })
    } catch (err: any) {
      // „Ç®„É©„Éº„É≠„Ç∞ÂâäÈô§Ôºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÂøúÔºâ
      setError(err.message || '„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    } finally {
      setLoading(false)
    }
  }

  // Âõ∫ÂÆöÂÄ§„Çí‰ΩøÁî®„Åó„Å¶hydration„Ç®„É©„Éº„ÇíÂõûÈÅø
  const hashCode = topicId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)
  
  const topic = {
    name: topicId,
    icon: getTopicIcon(topicId),
    description: getTopicDescription(topicId),
    followersCount: 10000 + (hashCode * 123) % 40000,
    articlesCount: stats.articlesCount,
    booksCount: stats.booksCount,
    scrapsCount: stats.scrapsCount,
    weeklyGrowth: 5 + (hashCode % 15),
    monthlyViews: 50000 + (hashCode * 654) % 50000,
    activeAuthors: 100 + (hashCode * 987) % 400,
    avgEngagement: ((hashCode % 50) / 10 + 3).toFixed(1),
    isFollowing: isFollowing,
    relatedTopics: getRelatedTopics(topicId),
    trendingAuthors: [] // Âæå„ÅßÂÆüË£Ö
  }
  
  const tabs = [
    { id: 'all', label: '„Åô„Åπ„Å¶', icon: 'üìã' },
    { id: 'articles', label: 'Ë®ò‰∫ã', count: stats.articlesCount, icon: 'üìù' },
    { id: 'books', label: 'Êú¨', count: stats.booksCount, icon: 'üìö' },
    { id: 'scraps', label: '„Çπ„ÇØ„É©„ÉÉ„Éó', count: stats.scrapsCount, icon: 'üí≠' }
  ]
  
  if (loading) {
    return (
      <div className="topics-page">
        <div className="container py-8">
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="topics-page">
      <div className="container py-8">
        <div className="max-w-7xl mx-auto">
          {/* „Éà„Éî„ÉÉ„ÇØ„Éí„Éº„É≠„Éº„Çª„ÇØ„Ç∑„Éß„É≥ */}
          <div className="topic-hero">
            <div className="topic-hero__content">
              <div className="topic-hero__header">
                <div>
                  <div className="topic-hero__title">
                    <div className="topic-hero__icon">{topic.icon}</div>
                    {topic.name}
                  </div>
                  <p className="topic-hero__description">{topic.description}</p>
                </div>
                <button 
                  className={`topic-hero__follow-btn ${isFollowing ? 'topic-hero__follow-btn--following' : ''}`}
                  onClick={() => setIsFollowing(!isFollowing)}
                >
                  {isFollowing ? '‚úì „Éï„Ç©„É≠„Éº‰∏≠' : '+ „Éï„Ç©„É≠„Éº'}
                </button>
              </div>
              
              <div className="topic-hero__stats">
                <div className="topic-hero__stat">
                  <div className="topic-hero__stat-value">{topic.followersCount.toLocaleString()}</div>
                  <div className="topic-hero__stat-label">„Éï„Ç©„É≠„ÉØ„Éº</div>
                </div>
                <div className="topic-hero__stat">
                  <div className="topic-hero__stat-value">{topic.articlesCount.toLocaleString()}</div>
                  <div className="topic-hero__stat-label">Ë®ò‰∫ã</div>
                </div>
                <div className="topic-hero__stat">
                  <div className="topic-hero__stat-value">{topic.monthlyViews.toLocaleString()}</div>
                  <div className="topic-hero__stat-label">ÊúàÈñì„Éì„É•„Éº</div>
                </div>
                <div className="topic-hero__stat">
                  <div className="topic-hero__stat-value">{topic.activeAuthors}</div>
                  <div className="topic-hero__stat-label">„Ç¢„ÇØ„ÉÜ„Ç£„ÉñËëóËÄÖ</div>
                </div>
              </div>
              
              <div className="topic-hero__tags">
                {topic.relatedTopics.map(related => (
                  <Link
                    key={related}
                    href={`/topics/${encodeURIComponent(related)}`}
                    className="topic-hero__tag"
                  >
                    {getTopicIcon(related)} {related}
                  </Link>
                ))}
              </div>
            </div>
          </div>
          
          {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Çø„Éñ */}
          <div className="topic-nav">
            <div className="topic-nav__tabs">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  className={`topic-nav__tab ${activeTab === tab.id ? 'topic-nav__tab--active' : ''}`}
                  onClick={() => setActiveTab(tab.id)}
                >
                  <span className="topic-nav__tab-icon">{tab.icon}</span>
                  {tab.label}
                  {tab.count !== undefined && (
                    <span className="topic-nav__tab-count">{tab.count.toLocaleString()}</span>
                  )}
                </button>
              ))}
            </div>
          </div>
          
          <div className="topic-layout">
            {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
            <main className="topic-main">
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <h3 className="font-semibold text-red-800 mb-2">„Ç®„É©„Éº</h3>
                  <p className="text-red-700">{error}</p>
                </div>
              )}

              {(activeTab === 'all' || activeTab === 'articles') && (
                <section className="topic-section">
                  <div className="topic-section__header">
                    <h2 className="topic-section__title">
                      <span className="topic-section__title-icon">üìù</span>
                      ÊúÄÊñ∞„ÅÆË®ò‰∫ã
                    </h2>
                    <Link href={`/articles?tag=${encodeURIComponent(topic.name)}`} className="topic-section__more">
                      „ÇÇ„Å£„Å®Ë¶ã„Çã ‚Üí
                    </Link>
                  </div>
                  <div className="topic-content-grid">
                    {content.articles.length > 0 ? (
                      content.articles.map((article: any) => (
                        <div key={article.id} className="topic-article-card">
                          <ArticleCard article={article} />
                        </div>
                      ))
                    ) : (
                      <div className="topic-empty">
                        <div className="topic-empty__icon">üìù</div>
                        <h3 className="topic-empty__title">„Åæ„Å†Ë®ò‰∫ã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
                        <p className="topic-empty__text">ÊúÄÂàù„ÅÆË®ò‰∫ã„ÇíÊäïÁ®ø„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü</p>
                      </div>
                    )}
                  </div>
                </section>
              )}
              
              {(activeTab === 'all' || activeTab === 'books') && (
                <section className="topic-section">
                  <div className="topic-section__header">
                    <h2 className="topic-section__title">
                      <span className="topic-section__title-icon">üìö</span>
                      „Åä„Åô„Åô„ÇÅ„ÅÆÊú¨
                    </h2>
                    <Link href={`/books?tag=${encodeURIComponent(topic.name)}`} className="topic-section__more">
                      „ÇÇ„Å£„Å®Ë¶ã„Çã ‚Üí
                    </Link>
                  </div>
                  <div className="topic-book-grid">
                    {content.books.length > 0 ? (
                      content.books.map((book: any) => (
                        <BookCard key={book.id} {...book} />
                      ))
                    ) : (
                      <div className="topic-empty">
                        <div className="topic-empty__icon">üìö</div>
                        <h3 className="topic-empty__title">„Åæ„Å†Êú¨„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
                        <p className="topic-empty__text">Áü•Ë≠ò„Çí‰ΩìÁ≥ªÁöÑ„Å´„Åæ„Å®„ÇÅ„ÅüÊú¨„ÇíÂÖ¨Èñã„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü</p>
                      </div>
                    )}
                  </div>
                </section>
              )}
              
              {(activeTab === 'all' || activeTab === 'scraps') && (
                <section className="topic-section">
                  <div className="topic-section__header">
                    <h2 className="topic-section__title">
                      <span className="topic-section__title-icon">üí≠</span>
                      „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çπ„ÇØ„É©„ÉÉ„Éó
                    </h2>
                    <Link href={`/scraps?tag=${encodeURIComponent(topic.name)}`} className="topic-section__more">
                      „ÇÇ„Å£„Å®Ë¶ã„Çã ‚Üí
                    </Link>
                  </div>
                  <div className="topic-content-grid">
                    {content.scraps.length > 0 ? (
                      content.scraps.map((scrap: any) => (
                        <div key={scrap.id} className="topic-scrap-card">
                          <ScrapCard {...scrap} />
                        </div>
                      ))
                    ) : (
                      <div className="topic-empty">
                        <div className="topic-empty__icon">üí≠</div>
                        <h3 className="topic-empty__title">„Åæ„Å†„Çπ„ÇØ„É©„ÉÉ„Éó„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
                        <p className="topic-empty__text">Ê∞óËªΩ„Å´Ë≥™Âïè„ÇÑË≠∞Ë´ñ„ÇíÂßã„ÇÅ„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
                      </div>
                    )}
                  </div>
                </section>
              )}
            </main>
            
            {/* „Çµ„Ç§„Éâ„Éê„Éº */}
            <aside className="topic-sidebar">
              {/* „Ç§„É≥„Çµ„Ç§„Éà */}
              <div className="topic-widget topic-insights">
                <h3 className="topic-widget__title">
                  <span className="topic-widget__title-icon">üìä</span>
                  „Éà„Éî„ÉÉ„ÇØ„Ç§„É≥„Çµ„Ç§„Éà
                </h3>
                <div className="topic-insights__grid">
                  <div className="topic-insight">
                    <div className="topic-insight__label">ÈÄ±ÈñìÊàêÈï∑Áéá</div>
                    <div className="topic-insight__value">
                      +{topic.weeklyGrowth}%
                      <span className="topic-insight__trend">‚Üë</span>
                    </div>
                  </div>
                  <div className="topic-insight">
                    <div className="topic-insight__label">Âπ≥Âùá„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà</div>
                    <div className="topic-insight__value">
                      {topic.avgEngagement}
                      <span className="topic-insight__trend">‚Üë</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* CTA */}
              <div className="topic-cta">
                <div className="topic-cta__icon">‚úçÔ∏è</div>
                <h3 className="topic-cta__title">{topic.name}„Å´„Å§„ÅÑ„Å¶Êõ∏„Åì„ÅÜ</h3>
                <p className="topic-cta__text">
                  „ÅÇ„Å™„Åü„ÅÆÁü•Ë≠ò„ÇÑÁµåÈ®ì„ÇíÂÖ±Êúâ„Åó„Å¶„ÄÅ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å´Ë≤¢ÁåÆ„Åó„Åæ„Åõ„Çì„ÅãÔºü
                </p>
                <Link href={`/new/article?topic=${encodeURIComponent(topic.name)}`}>
                  <button className="topic-cta__button">
                    Ë®ò‰∫ã„ÇíÊäïÁ®ø„Åô„Çã
                  </button>
                </Link>
              </div>
            </aside>
          </div>
        </div>
      </div>
    </div>
  )
}